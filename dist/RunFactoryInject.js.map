{"version":3,"sources":["webpack:///webpack/bootstrap 4dfb8a15389a49c307b3","webpack:///./src/factory-inject/RunFactoryInject.ts","webpack:///external \"reflect-metadata\"","webpack:///./src/factory-inject/inversify.config.ts","webpack:///external \"inversify\"","webpack:///./src/factory-inject/Car.ts","webpack:///./src/factory-inject/Truck.ts","webpack:///./src/factory-inject/FactoryInjectTest.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACrCA,qBAAO,CAAkB,CAAC;AAC1B,8CAAqB,CAAoB,CAAC;AAK1C;;IAEG;AAEH;;IAEG;AACH,QAAO,CAAC,GAAG,CAAC,0BAAM,CAAC,QAAQ,CAAW,UAAU,EAAE,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;AACpE,QAAO,CAAC,GAAG,CAAC,2CAA2C,GAAG,0BAAM,CAAC,GAAG,CAAqB,oBAAoB,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;;;;;;;ACfvH,8C;;;;;;;ACCA,uCAAiC,CAAW,CAAC;AAG7C,iCAAkB,CAAO,CAAC;AAC1B,mCAAkB,CAAS,CAAC;AAE5B,+CAA8B,CAAqB,CAAC;AAGpD,KAAI,MAAM,GAAqB,IAAI,kBAAM,EAAE,CAAC;AAE5C,OAAM,CAAC,IAAI,CAAW,UAAU,CAAC,CAAC,EAAE,CAAC,aAAG,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AACjE,OAAM,CAAC,IAAI,CAAW,UAAU,CAAC,CAAC,EAAE,CAAC,eAAK,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAErE,OAAM,CAAC,IAAI,CAAqB,oBAAoB,CAAC,CAAC,EAAE,CAAC,2BAAiB,CAAC,CAAC,gBAAgB,EAAE,CAAC;AAG/F,OAAM,CAAC,IAAI,CAAqB,oBAAoB,CAAC,CAAC,SAAS,CAAW,UAAC,OAAO;KAC9E,MAAM,CAAC,UAAC,KAAa;SAEjB,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;aAClB,MAAM,CAAE,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAW,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,MAAM,CAAE,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAW,UAAU,EAAE,OAAO,CAAC,CAAC;SACnE,CAAC;KACL,CAAC;AACL,EAAC,CAAC,CAAC;AAEH;mBAAe,MAAM,CAAC;;;;;;;AC7BtB,uC;;;;;;;;;;;;;;;;ACCA,uCAA4B,CAAW,CAAC;AAIxC;KAAA;KAKA,CAAC;KAHG,mBAAK,GAAL;SACI,MAAM,CAAC,4BAA4B,CAAC;KACxC,CAAC;KALL;SAAC,sBAAU,EAAE;;YAAA;KAMb,UAAC;AAAD,EAAC;AALD;sBAKC;;;;;;;;;;;;;;;;;ACRD,uCAA4B,CAAW,CAAC;AAGxC;KAAA;KAIA,CAAC;KAHG,qBAAK,GAAL;SACI,MAAM,CAAC,gCAAgC,CAAC;KAC5C,CAAC;KAJL;SAAC,sBAAU,EAAE;;cAAA;KAKb,YAAC;AAAD,EAAC;AAJD;wBAIC;;;;;;;;;;;;;;;;;;;;ACTD,uCAAqD,CAAW,CAAC;AAOjE;KAGK,2BAA0C,cAAkC;SADpE,QAAG,GAAG,OAAO,CAAC;SAElB,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACpC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAG,QAAQ,CAAC,CAAC;SACpC,gCAAgC;KACnC,CAAC;KAEF,gCAAI,GAAJ;SACG,MAAM,CAAE,QAAQ,CAAC,KAAK,EAAE,CAAC;KAC5B,CAAC;KAZL;SAAC,sBAAU,EAAE;oBAIK,kBAAM,CAAC,oBAAoB,CAAC;;0BAJjC;KAab,wBAAC;AAAD,EAAC;AAZD;oCAYC;AAED,KAAI,QAAY,CAAC","file":"RunFactoryInject.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4dfb8a15389a49c307b3\n **/","\r\nimport \"reflect-metadata\";\r\nimport  kernel  from \"./inversify.config\";\r\nimport { IFactoryInjectTest } from \"./IFactoryInjectTest\";\r\n\r\nimport { IVehicle } from \"./IVehicle\";\r\n\r\n/**\r\n * Named binding\r\n */\r\n\r\n/**\r\n * Invoking basic @inject\r\n */\r\nconsole.log(kernel.getNamed<IVehicle>(\"IVehicle\", \"truck\").drive());\r\nconsole.log(\"IFactoryInjectTest (@inject IVehicle)--> \" + kernel.get<IFactoryInjectTest>(\"IFactoryInjectTest\").init());\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/factory-inject/RunFactoryInject.ts\n **/","module.exports = require(\"reflect-metadata\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"reflect-metadata\"\n ** module id = 1\n ** module chunks = 0 1 2\n **/","\nimport { Kernel, IFactory } from \"inversify\";\nimport { IVehicle } from \"./IVehicle\";\nimport {IFactoryInjectTest } from \"./IFactoryInjectTest\";\nimport  Car  from \"./Car\";\nimport Truck from \"./Truck\";\n\nimport FactoryInjectTest from \"./FactoryInjectTest\";\n\n\nlet kernel:inversify.IKernel = new Kernel();\n\nkernel.bind<IVehicle>(\"IVehicle\").to(Car).whenTargetNamed(\"car\");\nkernel.bind<IVehicle>(\"IVehicle\").to(Truck).whenTargetNamed(\"truck\");\n\nkernel.bind<IFactoryInjectTest>(\"IFactoryInjectTest\").to(FactoryInjectTest).inSingletonScope();\n\n\nkernel.bind<IFactory<IVehicle>>(\"IFactory<IVehicle>\").toFactory<IVehicle>((context) => {\n    return (named: string) => {\n        \n        if (named === \"car\") {\n            return  context.kernel.getNamed<IVehicle>(\"IVehicle\", \"car\");\n        } else {\n            return  context.kernel.getNamed<IVehicle>(\"IVehicle\", \"truck\");\n        }\n    }\n});\n\nexport default kernel;\n\n\n/** WEBPACK FOOTER **\n ** ./src/factory-inject/inversify.config.ts\n **/","module.exports = require(\"inversify\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"inversify\"\n ** module id = 3\n ** module chunks = 0 1 2\n **/","import { IVehicle } from \"./IVehicle\";\nimport { injectable }  from \"inversify\";\n\n\n@injectable()\nexport default class Car implements IVehicle {\n   \n    drive(): string {\n        return \"Drive Car --> Car instance\";\n    }   \n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/factory-inject/Car.ts\n **/","\nimport { IVehicle } from \"./IVehicle\";\nimport  { injectable } from \"inversify\";\n\n@injectable()\nexport default class Truck implements IVehicle {\n    drive(): string {\n        return \"Drive Truck --> Truck instance\";\n    }   \n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/factory-inject/Truck.ts\n **/","import {injectable , inject, named, IFactory }  from \"inversify\";\n\nimport { IVehicle } from \"./IVehicle\";\n\nimport { IFactoryInjectTest } from \"./IFactoryInjectTest\";\n\n@injectable()\nexport default class FactoryInjectTest implements IFactoryInjectTest {\n    \n     private car = \"truck\";\n     constructor(@inject(\"IFactory<IVehicle>\") vehicleFactory: IFactory<IVehicle>) {\n         _vehicle = vehicleFactory(this.car);\n         console.log(\"instance\" , _vehicle);\n        // _vehicle = factory(this.car);\n     }\n    \n    init() : string  {\n       return  _vehicle.drive();\n    }\n}\n\nlet _vehicle:any;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/factory-inject/FactoryInjectTest.ts\n **/"],"sourceRoot":""}